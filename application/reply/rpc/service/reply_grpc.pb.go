// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: reply.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Reply_PostReply_FullMethodName   = "/service.reply/PostReply"
	Reply_DeleteReply_FullMethodName = "/service.reply/DeleteReply"
	Reply_UpdateReply_FullMethodName = "/service.reply/UpdateReply"
	Reply_GetReply_FullMethodName    = "/service.reply/GetReply"
)

// ReplyClient is the client API for Reply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplyClient interface {
	PostReply(ctx context.Context, in *PostReplyRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*Response, error)
	GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*GetReplyResponse, error)
}

type replyClient struct {
	cc grpc.ClientConnInterface
}

func NewReplyClient(cc grpc.ClientConnInterface) ReplyClient {
	return &replyClient{cc}
}

func (c *replyClient) PostReply(ctx context.Context, in *PostReplyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Reply_PostReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Reply_DeleteReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Reply_UpdateReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*GetReplyResponse, error) {
	out := new(GetReplyResponse)
	err := c.cc.Invoke(ctx, Reply_GetReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplyServer is the server API for Reply service.
// All implementations must embed UnimplementedReplyServer
// for forward compatibility
type ReplyServer interface {
	PostReply(context.Context, *PostReplyRequest) (*Response, error)
	DeleteReply(context.Context, *DeleteReplyRequest) (*Response, error)
	UpdateReply(context.Context, *UpdateReplyRequest) (*Response, error)
	GetReply(context.Context, *GetReplyRequest) (*GetReplyResponse, error)
	mustEmbedUnimplementedReplyServer()
}

// UnimplementedReplyServer must be embedded to have forward compatible implementations.
type UnimplementedReplyServer struct {
}

func (UnimplementedReplyServer) PostReply(context.Context, *PostReplyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReply not implemented")
}
func (UnimplementedReplyServer) DeleteReply(context.Context, *DeleteReplyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReply not implemented")
}
func (UnimplementedReplyServer) UpdateReply(context.Context, *UpdateReplyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReply not implemented")
}
func (UnimplementedReplyServer) GetReply(context.Context, *GetReplyRequest) (*GetReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReply not implemented")
}
func (UnimplementedReplyServer) mustEmbedUnimplementedReplyServer() {}

// UnsafeReplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplyServer will
// result in compilation errors.
type UnsafeReplyServer interface {
	mustEmbedUnimplementedReplyServer()
}

func RegisterReplyServer(s grpc.ServiceRegistrar, srv ReplyServer) {
	s.RegisterService(&Reply_ServiceDesc, srv)
}

func _Reply_PostReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).PostReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_PostReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).PostReply(ctx, req.(*PostReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_DeleteReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).DeleteReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_DeleteReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).DeleteReply(ctx, req.(*DeleteReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_UpdateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).UpdateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_UpdateReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).UpdateReply(ctx, req.(*UpdateReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_GetReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).GetReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_GetReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).GetReply(ctx, req.(*GetReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reply_ServiceDesc is the grpc.ServiceDesc for Reply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.reply",
	HandlerType: (*ReplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostReply",
			Handler:    _Reply_PostReply_Handler,
		},
		{
			MethodName: "DeleteReply",
			Handler:    _Reply_DeleteReply_Handler,
		},
		{
			MethodName: "UpdateReply",
			Handler:    _Reply_UpdateReply_Handler,
		},
		{
			MethodName: "GetReply",
			Handler:    _Reply_GetReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reply.proto",
}
