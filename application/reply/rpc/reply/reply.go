// Code generated by goctl. DO NOT EDIT.
// Source: reply.proto

package reply

import (
	"context"

	"gozero/application/reply/rpc/service"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteReplyRequest = service.DeleteReplyRequest
	GetReplyRequest    = service.GetReplyRequest
	GetReplyResponse   = service.GetReplyResponse
	PostReplyRequest   = service.PostReplyRequest
	Response           = service.Response
	UpdateReplyRequest = service.UpdateReplyRequest

	Reply interface {
		PostReply(ctx context.Context, in *PostReplyRequest, opts ...grpc.CallOption) (*Response, error)
		DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*Response, error)
		UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*Response, error)
		GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*GetReplyResponse, error)
	}

	defaultReply struct {
		cli zrpc.Client
	}
)

func NewReply(cli zrpc.Client) Reply {
	return &defaultReply{
		cli: cli,
	}
}

func (m *defaultReply) PostReply(ctx context.Context, in *PostReplyRequest, opts ...grpc.CallOption) (*Response, error) {
	client := service.NewReplyClient(m.cli.Conn())
	return client.PostReply(ctx, in, opts...)
}

func (m *defaultReply) DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*Response, error) {
	client := service.NewReplyClient(m.cli.Conn())
	return client.DeleteReply(ctx, in, opts...)
}

func (m *defaultReply) UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*Response, error) {
	client := service.NewReplyClient(m.cli.Conn())
	return client.UpdateReply(ctx, in, opts...)
}

func (m *defaultReply) GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*GetReplyResponse, error) {
	client := service.NewReplyClient(m.cli.Conn())
	return client.GetReply(ctx, in, opts...)
}
